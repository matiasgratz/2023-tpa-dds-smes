@startuml
'https://plantuml.com/class-diagram


enum TipoDeEntidad{
    LINEA_DE_SERVICIO_DE_TRANSPORTE,
    ORGANIZACION
}
enum TipoDeControlador{
    EMPRESA,
    ORGANISMO_CONTROL
}

class Controlador{
    String email
    TipoDeControlador tipoDeControlador
}
Controlador --> TipoDeControlador

class Entidad{
    String nombre
    TipoDeEntidad tipoDeEntidad
    ArrayList<Controlador> controladores;
    ArrayList<Establecimiento> establecimientos
    List<Usuario> interesadosEntidad

    void crearIncidente(PrestacionDeServicio prestacionDeServicio, String observacion, String nombreIncidente)
    boolean tieneServicio(PrestacionDeServicio servicio)
    boolean estaEnLocacion(Localizacion locacion);
    void enviarResumenAControladores()
    void crearIncidenteDesdeEntidad(PrestacionDeServicio)
}

Entidad --> "*" Usuario

class RepoUsuarios {
List<Usuario> usuarios
List<Usuario> getRepoUsuarios()
}

RepoUsuarios --> Usuario

Entidad --> "*" Establecimiento
Entidad --> TipoDeEntidad
Entidad --> "*" Controlador
Entidad --> RepoUsuarios

class Establecimiento{
    String nombre
    Localizacion locacion
    List<PrestacionDeServicio> serviciosPrestados
    boolean esAccesible(Servicio)
    boolean tieneServici(PrestacionDeServicio)
}


Establecimiento --> "*" PrestacionDeServicio



class Servicio {
    String Descripcion
}

class PrestacionDeServicio{
    boolean funciona
    Servicio servicio
}

PrestacionDeServicio --> Servicio

class Comunidad{
    List<Usuario> miembros
    List<Servicio> serviciosDeInteres

    List<IncidenteEnComunidad> incidentesDeComunidad

    void agregarIncidente(Incidente incidente)
    void cerrarIncidente(Incidente incidente)
    void notificarMiembrosApertura(Incidente incidente)

    void notificarMiembrosCierre(Incidente incidente)
    int tiempoDeCierre(Entidad entidad)
    Stream<IncidenteEnComunidad> incidentesDeEntidad(Entidad entidad)
    int incidentesEnLaSemnana()
}

Comunidad --> "*" IncidenteEnComunidad

class IncidenteEnComunidad{
    Incidente incidente
    EstadoIncidente estadoIncidente
    LocalDateTime inicio
    int tiempoDeCierre()
    PrestacionDeServicio prestacionDeServicio()
    boolean esDeLaSemana()
}
 IncidenteEnComunidad --> Incidente
 IncidenteEnComunidad --> EstadoIncidente


Comunidad -left-> "*"  Servicio
Comunidad --> "*" Miembro


class Miembro {
    Usuario usuario
    Comunidad miComunidad
    boolean esAdministrador
    boolean esAdministradorDeComunidad()
}
Miembro --> Usuario
Miembro --> Comunidad
Usuario --> "*" Miembro

class Usuario {
    List<Servicio> serviciosDeInteres
    List<Miembro> misMembresias
    List<Notificacion> incidentesANotificar
    NotificarAlUsuario medioDeComunicacionPreferido

    List<Servicio> serviciosDeInteresConIncidentes()
    Int localizacionNormalizada()
    List<Servicio> serviciosLocales()
    void notificarmeIncidentesActivosYNoNotificados()
    public void anteCierreIncidente(Incidente incidente)
    void notificarSiEsNecesario(Incidente incidente)
    void crearIncidente(PrestacionDeServicio prestacionDeServicio, String observacion, String nombreIncidente)
    void sugerirRevisionDeIncidentesCercanos()
}

Usuario --> "*" Notificacion
Usuario --> NotificarAlUsuario

class Notificacion{
    boolean fueNotificado
    Incidente incidente
    boolean esIncidente(Incidente incidente)
}

Notificacion --> Incidente

enum EstadoIncidente {
    ABIERTO,
    CERRADO
}

Incidente --> EstadoIncidente

class Incidente {
    EstadoIncidente estado
    String observacion
    PrestacionDeServicio lugarIncidente
}

Incidente --> PrestacionDeServicio


Usuario --> "*" Servicio

interface NotificarAlUsuario {
    void send(Usuario, String, String)
}
interface Ranking{
    List<Entidad> iniciarReporte(List<Entidad>, List<Comunidad>)
}
class RankingCantidadDeIncidentes{
    List<Entidad> iniciarReporte(List<Entidad>, List<Comunidad>)
}
class RankingTiempoPromedioDeCierre{
    List<Entidad> iniciarReporte(List<Entidad>, List<Comunidad>)
}

RankingCantidadDeIncidentes ..|> Ranking
RankingTiempoPromedioDeCierre ..|> Ranking
Ranking ..> Entidad
Ranking ..> Comunidad

interface ITareasProgramadas {
    void execute()
}

class TareaEnviarNotificacionIncidentes implements ITareasProgramadas {
    void execute()
}

TareaEnviarNotificacionIncidentes ..> RepoUsuarios

class EnviarNotificacionesJob {
    ITareasProgramadas tarea
    void executeInternal()
}

class ConfiguracionJob {
    ITareasProgramadas notificar
}

ConfiguracionJob --> ITareasProgramadas

EnviarNotificacionesJob --> ITareasProgramadas


@enduml
